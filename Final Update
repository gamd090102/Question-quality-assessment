import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler

answer_task_1_2 = pd.read_csv('C:/Users/Admin/Documents/01 data/data/metadata/answer_metadata_task_1_2.csv')
answer_task_3_4 = pd.read_csv('C:/Users/Admin/Documents/01 data/data/metadata/answer_metadata_task_3_4.csv')
question_task_1_2 = pd.read_csv('C:/Users/Admin/Documents/01 data/data/metadata/question_metadata_task_1_2.csv')
question_task_3_4 = pd.read_csv('C:/Users/Admin/Documents/01 data/data/metadata/question_metadata_task_3_4.csv')
student_task_1_2 = pd.read_csv('C:/Users/Admin/Documents/01 data/data/metadata/student_metadata_task_1_2.csv')
student_task_3_4 = pd.read_csv('C:/Users/Admin/Documents/01 data/data/metadata/student_metadata_task_3_4.csv')

answer_task_1_2_train, answer_task_1_2_test = train_test_split(answer_task_1_2, test_size=0.2, random_state=42)
answer_task_3_4_train, answer_task_3_4_test = train_test_split(answer_task_3_4, test_size=0.2, random_state=42)
question_task_1_2_train, question_task_1_2_test = train_test_split(question_task_1_2, test_size=0.2, random_state=42)
question_task_3_4_train, question_task_3_4_test = train_test_split(question_task_3_4, test_size=0.2, random_state=42)
student_task_1_2_train, student_task_1_2_test = train_test_split(student_task_1_2, test_size=0.2, random_state=42)
student_task_3_4_train, student_task_3_4_test = train_test_split(student_task_3_4, test_size=0.2, random_state=42)

param_grid = {'alpha': [0.1, 0.5, 1.0, 2.0]}

model = Ridge()
grid_search = GridSearchCV(model, param_grid, cv=5, scoring='neg_mean_squared_error')
grid_search.fit(answer_task_1_2_train[['feature_1', 'feature_2']], answer_task_1_2_train['target'])
best_params = grid_search.best_params_
print("Best hyperparameters for answer_task_1_2:", best_params)

model = Ridge(alpha=best_params['alpha'])
model.fit(answer_task_1_2_train[['feature_1', 'feature_2']], answer_task_1_2_train['target'])
predictions = model.predict(answer_task_1_2_test[['feature_1', 'feature_2']])
mse = mean_squared_error(answer_task_1_2_test['target'], predictions)
print("Answer metadata task 1-2 mean squared error (Ridge, cross-validation):", mse)

model = Ridge()
grid_search = GridSearchCV(model, param_grid, cv=5, scoring='neg_mean_squared_error')
grid_search.fit(question_task_3_4_train[['feature_1', 'feature_2']], question_task_3_4_train['target'])
best_params = grid_search.best_params_
print("Best hyperparameters for question_task_3_4:", best_params)

model = Ridge(alpha=best_params['alpha'])
model.fit(question_task_3_4_train[['feature_1', 'feature_2']], question_task_3_4_train['target'])
predictions = model.predict(question_task_3_4_test[['feature_1', 'feature_2']])
mse = mean_squared_error(question_task_3_4_test['target'], predictions)
print("Question metadata task 3-4 mean squared error (Ridge, cross-validation):", mse)

model = Ridge()
grid_search = GridSearchCV(model, param_grid, cv=5, scoring='neg_mean_squared_error')
grid_search.fit(student_task_1_2_train[['feature_1', 'feature_2']], student_task_1_2_train['target'])
best_params = grid_search.best_params_
print("Best hyperparameters for student_task_1_2:", best_params)

model = Ridge(alpha=best_params['alpha'])
model.fit(student_task_1_2_train[['feature_1', 'feature_2']], student_task_1_2_train['target'])
predictions = model.predict(student_task_1_2_test[['feature_1', 'feature_2']])
mse = mean_squared_error(student_task_1_2_test['target'], predictions)
print("Student metadata task 1-2 mean squared error (Ridge, cross-validation):", mse)

model = Ridge()
grid_search = GridSearchCV(model, param_grid, cv=5, scoring='neg_mean_squared_error')
grid_search.fit(student_task_3_4_train[['feature_1', 'feature_2']], student_task_3_4_train['target'])
best_params = grid_search.best_params_
print("Best hyperparameters for student_task_3_4:", best_params)

model = Ridge(alpha=best_params['alpha'])
model.fit(student_task_3_4_train[['feature_1', 'feature_2']], student_task_3_4_train['target'])
predictions = model.predict(student_task_3_4_test[['feature_1', 'feature_2']])
mse = mean_squared_error(student_task_3_4_test['target'], predictions)
print("Student metadata task 3-4 mean squared error (Ridge, cross-validation):", mse)
